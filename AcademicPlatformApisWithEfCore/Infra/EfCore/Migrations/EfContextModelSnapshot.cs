// <auto-generated />
using System;
using AcademicPlatformApisWithEfCore.Infra.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AcademicPlatformApisWithEfCore.Infra.EfCore.Migrations
{
    [DbContext(typeof(EfContext))]
    partial class EfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<double>("DurationInMinutes")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.Property<int?>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.CourseEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseEntries");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)");

                    b.Property<string>("Password")
                        .HasColumnType("VARCHAR(15)");

                    b.Property<string>("Phone")
                        .HasColumnType("CHAR(13)");

                    b.Property<DateTime>("RegisteredIn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.Teacher", b =>
                {
                    b.HasBaseType("AcademicPlatformApisWithEfCore.Models.Entities.User");

                    b.Property<string>("Cpf")
                        .HasColumnType("CHAR(11)");

                    b.Property<string>("CtpsNumber")
                        .HasColumnType("CHAR(10)");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.Course", b =>
                {
                    b.HasOne("AcademicPlatformApisWithEfCore.Models.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.CourseEntry", b =>
                {
                    b.HasOne("AcademicPlatformApisWithEfCore.Models.Entities.Course", "Course")
                        .WithMany("Entries")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademicPlatformApisWithEfCore.Models.Entities.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.Course", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.User", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("AcademicPlatformApisWithEfCore.Models.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
